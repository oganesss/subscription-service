openapi: 3.0.3
info:
  title: Subscription Service API
  version: 1.0.0
servers:
  - url: /api/v1
paths:
  /subscriptions:
    get:
      summary: List subscriptions
      parameters:
        - in: query
          name: user_id
          schema: { type: string, format: uuid }
        - in: query
          name: service_name
          schema: { type: string }
        - in: query
          name: from
          schema: { type: string, example: "07-2025" }
        - in: query
          name: to
          schema: { type: string, example: "08-2025" }
        - in: query
          name: limit
          schema: { type: integer, default: 50 }
        - in: query
          name: offset
          schema: { type: integer, default: 0 }
      responses:
        '200':
          description: OK
    post:
      summary: Create subscription
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionCreate'
      responses:
        '201': { description: Created }
  /subscriptions/{id}:
    get:
      summary: Get subscription by id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200': { description: OK }
        '404': { description: Not Found }
    put:
      summary: Update subscription
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionCreate'
      responses:
        '200': { description: OK }
    delete:
      summary: Delete subscription
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204': { description: No Content }
  /subscriptions/total:
    get:
      summary: Total amount for period
      parameters:
        - in: query
          name: from
          required: true
          schema: { type: string, example: "07-2025" }
        - in: query
          name: to
          required: true
          schema: { type: string, example: "08-2025" }
        - in: query
          name: user_id
          schema: { type: string, format: uuid }
        - in: query
          name: service_name
          schema: { type: string }
      responses:
        '200': { description: OK }
components:
  schemas:
    SubscriptionCreate:
      type: object
      required: [service_name, price, user_id, start_date]
      properties:
        service_name: { type: string }
        price: { type: integer, minimum: 0 }
        user_id: { type: string, format: uuid }
        start_date: { type: string, example: "07-2025" }
        end_date: { type: string, nullable: true, example: "08-2025" }

